{
  "name": "C++ 11 - Signals & Slots",
  "tagline": "",
  "body": "# signals [![Build Status](https://travis-ci.org/zyvitski/signals.svg?branch=master)](https://travis-ci.org/zyvitski/signals)\r\n\r\nA Signals and Slots implementation using C++11\r\n\r\n\r\nBasic Usage:\r\n```cpp\r\n#include<signals.hpp>\r\n\r\n//create a signal of type double(std::vector<double> const&)\r\nsignals::signal_t<double(std::vector<double> const&)> sig;\r\n\r\n//connect slots and get the slot ids\r\nauto&& id = signals::connect(sig,[](std::vector<double> const& v){\r\n    return std::accumulate(v.begin(),v.end(),0);\r\n});\r\nauto&& id2 = signals::connect(sig,[](std::vector<double> const& v){\r\n    return std::accumulate(v.begin(),v.end(),1,std::multiplies<double>{});\r\n});\r\n//data to be emitted\r\nstd::vector<double> v = {1,2,3,4,5};\r\n\r\n//call all slots with data v\r\nauto&& em = signals::emit(sig,v);\r\n//get result of emit\r\nauto&& res = signals::result(em);\r\n//print all\r\nfor(auto&& r: res){\r\n    std::cout<<r<<std::endl;\r\n}\r\n```\r\nAccess a result from a specific slot:\r\n```cpp\r\n//get the result of a specific slot by using its id\r\nauto&& slot_id1_result = signals::result(id,em);\r\nstd::cout<<slot_id1_result<<std::endl;\r\n```\r\nEmit Asynchronously with a thread pool:\r\n```cpp\r\n//a thread pool. see: thread_pool.hpp\r\nthread_pool pool;\r\n//call emit async using a thread pool\r\nauto&& em2 = signals::emit(sig,pool,v);\r\n\r\n//get results, when using pool this will wait on the futures provided by the pool for each emit\r\nauto&& res2 = signals::result(em2);\r\n\r\n//print\r\nfor(auto&& r: res2){\r\n    std::cout<<r<<std::endl;\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}